// This file was @generated by typegen
export type ErrorResponse =
  | Unauthorized
  | Forbidden
  | NotFound
  | Conflict
  | Validation
  | RateLimited
  | Server;
/** The error when the client is missing authorization. This error often occurs when the user
doesn't pass in the required authentication or passes in invalid credentials.

-----

### Example

```json
{
  "type": "UNAUTHORIZED",
  "status": 401,
  "message": "The user is missing authentication or the passed credentials are invalid"
}
``` */
export interface Unauthorized extends SharedErrorData {
  type: "UNAUTHORIZED";
}
/** The error when a client *has* been succesfully authorized but does not have the required
permissions to execute an action.

-----

### Example

```json
{
  "type": "FORBIDDEN",
  "status": 403,
  "message": "The user is missing the requried permissions to execute this action",
}
``` */
export interface Forbidden extends SharedErrorData {
  type: "FORBIDDEN";
}
/** The error when a client requests a resource that does not exist.

-----

### Example

```json
{
  "type": "NOT_FOUND",
  "status": 404,
  "message": "The requested resource could not be found"
}
``` */
export interface NotFound extends SharedErrorData {
  type: "NOT_FOUND";
}
/** The error when a client's request causes a conflict, usually when they're trying to create
something that already exists.

-----

### Example

```json
{
  "type": "CONFLICT",
  "status": 409,
  "message": "The request couldn't be completed due to conflicting with other data on the server",
  "item": "username",
}
``` */
export interface Conflict extends SharedErrorData {
  type: "CONFLICT";
  /** The conflicting item. */
  item: string;
}
/** The error when a request a client sends is incorrect and fails validation.

-----

### Example

```json
{
  "type": "VALIDATION",
  "status": 422,
  "message": "Invalid request",
  "value_name": "author",
  "info": "author name is a bit too cringe"
}
``` */
export interface Validation extends SharedErrorData {
  type: "VALIDATION";
  /** The name of the value that failed validation. */
  value_name: string;
  /** Extra information about what went wrong. */
  info: string;
}
/** The error when a client is rate limited.

-----

### Example

```json
{
  "type": "RATE_LIMITED",
  "status": 429,
  "message": "You have been rate limited",
  "retry_after": 1234
}
``` */
export interface RateLimited extends SharedErrorData {
  type: "RATE_LIMITED";
  /** The amount of milliseconds you're still rate limited for. */
  retry_after: number;
}
/** The error when the server fails to process a request.

Getting this error means that it's the server's fault and not the client that the request
failed.

-----

### Example

```json
{
  "type": "SERVER",
  "status": 500,
  "message": "Server encountered an unexpected error",
  "info": "Server got stabbed 28 times"
}
``` */
export interface Server extends SharedErrorData {
  type: "SERVER";
  /** Extra information about what went wrong. */
  info: string;
}
export type ClientPayload = Ping;
/** The payload the client is supposed to periodically send the server to not get disconnected.

The interval where these pings are supposed to be sent can be found in the `HELLO` payload
of the {@link ServerPayload} enum.

-----

> **Note**
>
> You are supposed to send your first ping in a connection after `RAND * heartbeat_interval` seconds,
`RAND` being a random floating number between 0 and 1.
>
> This is done to avoid immediately overloading Pandemonium by connecting if it ever has to go down.

### Example

```json
> {"op":"PING"}
< {"op":"PONG"}
``` */
export interface Ping {
  op: "PING";
}
/** The SessionCreate payload.

This is used to authenticate a user and obtain a token to interface with the API.

-----

### Example

```json
{
  "indentifier": "yendri",
  "password": "authentícame por favor",
  "platform": "linux",
  "client": "pilfer"
}
``` */
export interface SessionCreate {
  /** The session user's identifier. This can be either their email or username. */
  identifier: string;
  /** The session user's password. */
  password: string;
  /** The session's platform (linux, windows, mac, etc.) */
  platform: string;
  /** The client the session was created by. */
  client: string;
}
/** The UserCreate payload.

This is used when a user is initially first created. For authentication payloads check
{@link SessionCreate}.

-----

### Examples

```json
{
  "username": "yendri",
  "email": "yendri@llamoyendri.io",
  "password": "autentícame por favor" // don't actually use this as a password
}
``` */
export interface UserCreate {
  /** The user's name.

  This is different to their `display_name` as it denotes how they're more formally
  referenced by the API. */
  username: string;
  /** The user's email. */
  email: string;
  /** The user's password. */
  password: string;
}
/** Rate limits that apply to Oprish (The REST API).

-----

### Example

```json
{
  "get_instance_info": {
    "reset_after": 5,
    "limit": 2
  },
  "create_message": {
    "reset_after": 5,
    "limit": 10
  }
}
``` */
export interface OprishRateLimits {
  /** Rate limits for the {@link get_instance_info} endpoint. */
  get_instance_info: RateLimitConf;
  /** Rate limits for the {@link create_message} endpoint. */
  create_message: RateLimitConf;
}
/** The session payload.

The user should ideally have one session for every client they have on every device.

-----

### Example

```json
{
  "id": 2312155037697,
  "user_id": 2312155693057,
  "platform": "linux",
  "client": "pilfer"
}
``` */
export interface Session {
  /** The session's ID. */
  id: number;
  /** The session user's ID. */
  user_id: number;
  /** The session's platform (linux, windows, mac, etc.) */
  platform: string;
  /** The client the session was created by. */
  client: string;
  /** The session's creation IP address. */
  ip: string;
}
/** The data format for uploading a file.

This is a `multipart/form-data` form.

-----

### Example

```sh
curl \
  -F file=@trolley.mp4 \
  -F spoiler=true \
  https://cdn.eludris.gay/attachments/
``` */
export interface FileUpload {
  file: unknown;
  spoiler: boolean;
}
/** The user payload.

-----

### Example

```json
{
  "id": 48615849987333,
  "username": "yendri",
  "display_name": "Nicolas",
  "social_credit": -69420,
  "status": "ayúdame por favor",
  "bio": "NICOLAAAAAAAAAAAAAAAAAAS!!!\n\n\nhttps://cdn.eludris.gay/static/nicolas.mp4",
  "avatar": 2255112175647,
  "banner": 2255049523230,
  "badges": 0,
  "permissions": 0
}
``` */
export interface User {
  /** The user's ID. */
  id: number;
  /** The user's username. This field has to be between 2 and 32 characters long. */
  username: string;
  /** The user's display name. This field has to be between 2 and 32 characters long. */
  display_name?: string | null;
  /** The user's social credit score. */
  social_credit: number;
  /** The user's status. This field cannot be more than 128 characters long. */
  status?: string | null;
  /** The user's bio. The upper limit is the instance's {@link InstanceInfo} `bio_limit`. */
  bio?: string | null;
  /** The user's avatar. This field has to be a valid file ID in the "avatar" bucket. */
  avatar?: number | null;
  /** The user's banner. This field has to be a valid file ID in the "banner" bucket. */
  banner?: number | null;
  /** The user's badges as a bitfield. */
  badges: number;
  /** The user's instance-wide permissions as a bitfield. */
  permissions: number;
}
export type FileMetadata = Text | Image | Video | Other;
/** Represents information about the connected Eludris instance.

-----

### Example

```json
{
  "instance_name": "eludris",
  "description": "The *almost* official Eludris instance - ooliver.",
  "version": "0.3.2",
  "message_limit": 2000,
  "oprish_url": "https://api.eludris.gay",
  "pandemonium_url": "wss://ws.eludris.gay/",
  "effis_url": "https://cdn.eludris.gay",
  "file_size": 20000000,
  "attachment_file_size": 25000000,
  "rate_limits": {
    "oprish": {
      "info": {
        "reset_after": 5,
        "limit": 2
      },
      "message_create": {
        "reset_after": 5,
        "limit": 10
      },
      "rate_limits": {
        "reset_after": 5,
        "limit": 2
      }
    },
    "pandemonium": {
      "reset_after": 10,
      "limit": 5
    },
    "effis": {
      "assets": {
        "reset_after": 60,
        "limit": 5,
        "file_size_limit": 30000000
      },
      "attachments": {
        "reset_after": 180,
        "limit": 20,
        "file_size_limit": 500000000
      },
      "fetch_file": {
        "reset_after": 60,
        "limit": 30
      }
    }
  }
}
``` */
export interface InstanceInfo {
  /** The instance's name. */
  instance_name: string;
  /** The instance's description.

  This is between 1 and 2048 characters long. */
  description: string | null;
  /** The instance's Eludris version. */
  version: string;
  /** The maximum length of a message's content. */
  message_limit: number;
  /** The URL of the instance's Oprish (REST API) endpoint. */
  oprish_url: string;
  /** The URL of the instance's Pandemonium (WebSocket API) endpoint. */
  pandemonium_url: string;
  /** The URL of the instance's Effis (CDN) endpoint. */
  effis_url: string;
  /** The maximum file size (in bytes) of an asset. */
  file_size: number;
  /** The maximum file size (in bytes) of an attachment. */
  attachment_file_size: number;
  /** The rate limits that apply to the connected Eludris instance.

  This is not present if the `rate_limits` query parameter is not set. */
  rate_limits?: InstanceRateLimits | null;
}

export interface Text {
  type: "Text";
}

export interface Image {
  type: "Image";
  /** The image's width in pixels. */
  width?: number | null;
  /** The image's height in pixels. */
  height?: number | null;
}

export interface Video {
  type: "Video";
  /** The video's width in pixels. */
  width?: number | null;
  /** The video's height in pixels. */
  height?: number | null;
}

export interface Other {
  type: "Other";
}
/** The response to a {@link SessionCreate}.

-----

### Example

```json
{
  "token": "",
  "session": {
    "indentifier": "yendri",
    "password": "authentícame por favor",
    "platform": "linux",
    "client": "pilfer"
  }
}
``` */
export interface SessionCreated {
  /** The session's token. This can be used by the user to properly interface with the API. */
  token: string;
  /** The session object that was created. */
  session: Session;
}
/** Represents a single rate limit for Effis.

-----

### Example

```json
{
  "reset_after": 60,
  "limit": 5,
  "file_size_limit": 30000000
}
``` */
export interface EffisRateLimitConf {
  /** The amount of seconds after which the rate limit resets. */
  reset_after: number;
  /** The amount of requests that can be made within the `reset_after` interval. */
  limit: number;
  /** The maximum amount of bytes that can be sent within the `reset_after` interval. */
  file_size_limit: number;
}
/** Shared fields between all error response variants. */
export interface SharedErrorData {
  /** The HTTP status of the error. */
  status: number;
  /** A brief explanation of the error. */
  message: string;
}
export type ServerPayload = Pong | RateLimit | Hello | MessageCreate;
/** Represents a file stored on Effis.

-----

### Example

```json
{
  "id": 2195354353667,
  "name": "das_ding.png",
  "bucket": "attachments",
  "metadata": {
    "type": "image",
    "width": 1600,
    "height": 1600
  }
}
``` */
export interface FileData {
  /** The file's ID. */
  id: number;
  /** The file's name. */
  name: string;
  /** The bucket the file is stored in. */
  bucket: string;
  /** Whether the file is marked as a spoiler. */
  spoiler?: boolean;
  /** The {@link FileMetadata} of the file. */
  metadata: FileMetadata;
}
/** Represents all rate limits that apply to the connected Eludris instance.

-----

### Example
```json
{
  "oprish": {
    "info": {
      "reset_after": 5,
      "limit": 2
    },
    "message_create": {
      "reset_after": 5,
      "limit": 10
    },
    "rate_limits": {
      "reset_after": 5,
      "limit": 2
    }
  },
  "pandemonium": {
    "reset_after": 10,
    "limit": 5
  },
  "effis": {
    "assets": {
      "reset_after": 60,
      "limit": 5,
      "file_size_limit": 30000000
    },
    "attachments": {
      "reset_after": 180,
      "limit": 20,
      "file_size_limit": 500000000
    },
    "fetch_file": {
      "reset_after": 60,
      "limit": 30
    }
  }
}
``` */
export interface InstanceRateLimits {
  /** The instance's Oprish rate limit information (The REST API). */
  oprish: OprishRateLimits;
  /** The instance's Pandemonium rate limit information (The WebSocket API). */
  pandemonium: RateLimitConf;
  /** The instance's Effis rate limit information (The CDN). */
  effis: EffisRateLimits;
}
/** Represents a single rate limit.

-----

### Example

```json
{
  "reset_after": 60,
  "limit": 30
}
``` */
export interface RateLimitConf {
  /** The amount of seconds after which the rate limit resets. */
  reset_after: number;
  /** The amount of requests that can be made within the `reset_after` interval. */
  limit: number;
}
/** A {@link ClientPayload} `PING` payload response.

-----

### Example

```json
{
  "op": "PONG"
}
``` */
export interface Pong {
  op: "PONG";
}
/** The event sent when the client gets gateway rate limited.

The client is supposed to wait `wait` milliseconds before sending any more events,
otherwise they are disconnected.

-----

### Example

```json
{
  "op": "RATE_LIMIT",
  "d": {
    "wait": 1010 // 1.01 seconds
  }
}
``` */
export interface RateLimit {
  op: "RATE_LIMIT";
  /** The amount of milliseconds you have to wait before the rate limit ends */
  wait: number;
}
/** The payload sent by the server when you initiate a new gateway connection.

-----

### Example

```json
{
  "op": "HELLO",
  "d": {
    "heartbeat_interval": 45000,
    "instance_info": {
      "instance_name": "EmreLand",
      "description": "More based than Oliver's instance (trust)",
      "version": "0.3.3",
      "message_limit": 2048,
      "oprish_url": "https://example.com",
      "pandemonium_url": "https://example.com",
      "effis_url": "https://example.com",
      "file_size": 20000000,
      "attachment_file_size": 100000000
    },
    "rate_limit": {
      "reset_after": 10,
      "limit": 5
    }
  }
}
``` */
export interface Hello {
  op: "HELLO";
  /** The amount of milliseconds your ping interval is supposed to be. */
  heartbeat_interval: number;
  /** The instance's info.

This is the same payload you get from the {@link get_instance_info} payload without
ratelimits */
  instance_info: InstanceInfo;
  /** The pandemonium ratelimit info. */
  rate_limit: RateLimitConf;
}
/** The event sent when the client receives a {@link Message}.

-----

### Example

```json
{
  "op": "MESSAGE_CREATE",
  "d": {
    "author": "A Certain Woo",
    "content": "Woo!"
  }
}
``` */
export interface MessageCreate {
  op: "MESSAGE_CREATE";
  d: Message;
}
/** The message payload.

-----

### Example

```json
{
  "author": "Not a weeb",
  "content": "Hello, World!"
}
``` */
export interface Message {
  /** The message's author. This field has to be between 2 and 32 characters long.

  The author will be trimmed from leading and trailing whitespace. */
  author: string;
  /** The message's content. This field has to be at-least 2 characters long. The upper limit
  is the instance's {@link InstanceInfo} `message_limit`.

  The content will be trimmed from leading and trailing whitespace. */
  content: string;
}
/** Rate limits that apply to Effis (The CDN).

-----

### Example

```json
{
  "assets": {
    "reset_after": 60,
    "limit": 5,
    "file_size_limit": 30000000
  },
  "attachments": {
    "reset_after": 180,
    "limit": 20,
    "file_size_limit": 500000000
  },
  "fetch_file": {
    "reset_after": 60,
    "limit": 30
  }
}
``` */
export interface EffisRateLimits {
  /** Rate limits for the asset buckets. */
  assets: EffisRateLimitConf;
  /** Rate limits for the attachment bucket. */
  attachments: EffisRateLimitConf;
  /** Rate limits for the file fetching endpoints. */
  fetch_file: RateLimitConf;
}
